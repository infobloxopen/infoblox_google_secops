# Product: NFBLXX_US_INFOBLOX
# Category: DNS
# Supported Format: SYSLOG+KV,SYSLOG+JSON
# Reference: N/A
# Last Updated: 2025-08-04
# Copyright 2025 Google SecOps

filter {
  mutate {
    replace => {
      "security_result" => ""
      "intermediary_application" => ""
      "ts" => ""
      "intermediary" => ""
      "InfobloxB1PolicyName" => ""
      "InfobloxPolicyID" => ""
      "InfobloxB1DNSTags" => ""
      "destinationDnsDomain" => ""
      "record_type" => ""
      "InfobloxB1Region" => ""
      "app" => ""
      "act" => ""
      "InfobloxThreatConfidence" => ""
      "InfobloxThreatLevel" => ""
      "InfobloxThreatProperty" => ""
      "dns_question" => ""
      "msg_value" => ""
      "InfobloxDNSQType" => ""
      "InfobloxDNSQClass" => ""
      "InfobloxDNSRCode" => ""
      "msg" => ""
      "dvchost" => ""
      "device_vendor" => ""
      "src" => ""
      "dst" => ""
      "dvc" => ""
      "externalId" => ""
      "device_event_class_id" => ""
      "outcome" => ""
      "event_name" => ""
      "shost" => ""
      "smac" => ""
      "suser" => ""
      "temp_data" => ""
      "version" => ""
      "severity" => ""
      "device_version" => ""
      "cef_extension" => ""
      "timestamp" => ""
      "kv_data" => ""
      "about" => ""
      "cat" => ""
      "InfobloxLifetime" => ""
      "InfobloxEventOccurredTime" => ""
      "InfobloxInsightId" => ""
      "InfobloxInsightThreatType" => ""
      "InfobloxThreatClass" => ""
      "most_recent_event_time" => ""
      "most_recent_event_timezone" => ""
      "app_protocol_output" => ""
      "response.result.absolute_name_spec" => ""
      "resp_body.result.ttl" => ""
      "InfobloxSubjectGroups" => ""
      "InfobloxResourceType" => ""
      "InfobloxResourceId" => ""
      "InfobloxHTTPReqBody" => ""
      "InfobloxHTTPRespBody" => ""
      "resp_body.result.dns_absolute_name_spec" => ""
      "InfobloxB1OPHIPAddress" => ""
      "about_ip" => ""
      "about_port" => ""
      "proto_value" => ""
      "proto" => ""
      "srcPort" => ""
      "InfobloxClientID" => ""
      "url" => ""
      "sev" => ""
      "result" => ""
      "security_result_action" => ""
      "srcMAC" => ""
      "usrName" => ""
      "has_principal_user" => "false"
      "has_question_name" => "false"
      "target_machine_id_present" => "false"
      "principal_machine_id_present" => "false"
    }
  }

  grok {
    match => {
      "message" => [
        '<%{INT}>%{INT} %{TIMESTAMP_ISO8601:ts}\\s+-\\s+%{DATA:intermediary_application}\\s+-%{DATA}\\s+-\\s+%{GREEDYDATA}msg=\\\"%{DATA:msg_value}\\\" %{GREEDYDATA}'
        "<%{INT}>%{INT} %{TIMESTAMP_ISO8601:ts}\\s+-\\s+%{DATA:intermediary_application}\\s+-%{DATA}\\s+-\\s+%{GREEDYDATA}"
      ]
    }
    on_error => "grok_failed"
    overwrite => [ "intermediary_application", "ts","msg_value"]
  }
  # CEF and LEEF extraction
  grok {
    match => {
      "message" => [
        "<%{INT}>%{SYSLOGTIMESTAMP:ts} %{DATA} (LEEF|CEF): %{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|%{DATA:event_name}\\|%{INT:severity}\\|%{GREEDYDATA:cef_extension}"
        "(?:<%{INT}>|%{DATA:temp_data})(LEEF|CEF):%{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|(?:%{DATA:event_name}\\||)(?P<severity>Medium|MEDIUM|Low|LOW|HIGH|High|Unknown|Very-High|%{INT})(?:\\||)%{GREEDYDATA:cef_extension}",
        "(LEEF|CEF): %{TIMESTAMP_ISO8601:timestamp} \\| %{GREEDYDATA:kv_data}"
        "(?:<%{INT}>|%{DATA})(LEEF|CEF) %{DATA} %{INT:version}\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|(?:%{DATA:event_name}\\||)(?P<severity>Medium|MEDIUM|Low|LOW|HIGH|High|Unknown|%{INT})(?:\\||)%{GREEDYDATA:cef_extension}"
        "(LEEF|CEF): %{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|%{DATA:event_name}\\|%{INT:severity}\\|%{GREEDYDATA:cef_extension}"
        "(LEEF|CEF):%{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|(?:%{DATA:event_name}\\||)(?P<severity>Medium|MEDIUM|Low|LOW|HIGH|High|Unknown|Very-High|%{INT})(?:\\||)%{GREEDYDATA:cef_extension}"
        "(LEEF|CEF) %{DATA} %{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|(?:%{DATA:event_name}\\||)(?P<severity>Medium|MEDIUM|Low|LOW|HIGH|High|Unknown|%{INT})(?:\\||)%{GREEDYDATA:cef_extension}"
        "(LEEF|CEF):%{INT:version}(.%{INT})?\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|%{GREEDYDATA:cef_extension}"
      ]
    }
    overwrite => ["version","device_event_class_id", "event_name","severity", "temp_data","timestamp","kv_data","device_version","cef_extension","device_vendor","device_product"]
    on_error => "not_grok_pattern"
  }
  mutate {
    convert => {
      "is_cef_log" => "string"
    }
    on_error => "is_cef_log_already_string"
  }

  mutate {
    replace => {
      "is_cef_log_temp" => "%{is_cef_log}"
    }
    on_error => "is_cef_log_empty"
  }


  if ( ([not_grok_pattern] == true) and ([is_cef_log_empty] == false) and [is_cef_log_temp] == "true") {
    drop {
      tag => "TAG_MALFORMED_ENCODING"
    }
  } else if [not_grok_pattern] and (([is_cef_log_empty] == false) and [is_cef_log_temp] == "false") {
    grok {
      match => {
        "message" => [
          "(?:<%{INT}>|%{DATA:temp_data})(LEEF|CEF):%{INT:version}\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|\\[%{DATA}\\] %{GREEDYDATA:msg}",
          "(?:<%{INT}>|%{DATA:temp_data})(LEEF|CEF):%{INT:version}\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{GREEDYDATA:msg}",
          "<%{INT}>%{DATA:temp_data}(LEEF|CEF):%{INT:version}\\|%{GREEDYDATA:kv_data}",
          "(LEEF|CEF):%{INT:version}\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{DATA:device_event_class_id}\\|\\[%{DATA}\\] %{GREEDYDATA:msg}",
          "(LEEF|CEF):%{INT:version}\\|%{DATA:device_vendor}\\|%{DATA:device_product}\\|%{DATA:device_version}\\|%{GREEDYDATA:msg}",
          "(LEEF|CEF):%{INT:version}\\|%{GREEDYDATA:kv_data}",
          "(LEEF|CEF):%{GREEDYDATA:kv_data}"
        ]
      }
      on_error => "is_cef_log"
      overwrite => ["temp_data","version","device_vendor","device_product","device_version","device_event_class_id","msg","kv_data"]
    }
  } else if [not_grok_pattern] and [is_cef_log_empty] == true {
    drop {
      tag => "TAG_MALFORMED_ENCODING"
    }
  }

  mutate {
    gsub => ["cef_extension", "(\\\s+)([0-9a-zA-Z_.-]+?)=", "^$2="]
  }

  if [cef_extension] != "" {
    kv {
      source => "cef_extension"
      field_split => "^"
      value_split => "="
      whitespace => "strict"
      on_error => "no_cef_extension"
    }
  }

  if [kv_data] != "" {
    mutate {
      gsub => ["kv_data","version=","device_version="]
    }
    mutate {
      gsub => ["kv_data","srcip=port","src= "]
    }
    mutate {
      gsub => ["kv_data","srcip=","src="]
    }
    mutate {
      gsub => ["kv_data","username=","suid="]
    }
    mutate {
      gsub => ["kv_data","action=","act="]
    }
    kv {
      source => "kv_data"
      field_split => "|"
      value_split => "="
      on_error => "no_kv_data_1"
    }
    if [kv_data] =~ ";" {
      mutate {
        gsub => ["kv_data",'\\\"',""]
      }
      kv {
        source => "kv_data"
        field_split => ";"
        value_split => ":"
        on_error => "no_kv_data_2"
      }
    }
  }

  #### CEF and LEEF mapping
  if [msg] =~ "^{" {
    json {
      source => "msg"
      array_function => "split_columns"
      on_error => "msg_json_parse_failure"
    }
  }
  else if [msg] != "" {
    mutate {
      gsub => ["msg", '\\"',""]
    }
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.description" => "%{msg}"
      }
      on_error => "no_msg"
    }
    grok {
      match => {
        "msg" => [
          "\\[%{DATA:module}] %{DATA} command\\s+'%{DATA:command}'",
          "Threat Type:\\s+%{DATA:InfobloxInsightThreatType},\\s+Threat Class\\(s\\):\\s+%{DATA:InfobloxThreatClass},\\s+Description:%{DATA},\\s+Most recent event:\\s+%{TIMESTAMP_ISO8601:most_recent_event_time} %{ISO8601_TIMEZONE:most_recent_event_timezone}",
          'ip.%{IP:about_ip}/%{INT:about_port}'

        ]
      }
      on_error => "msg_grok_failed"
      overwrite => ["module","command", "InfobloxInsightThreatType","InfobloxThreatClass","most_recent_event_time","most_recent_event_timezone", "about_ip", "about_port"]
    }
  }
  if [about_ip] != "" {
    mutate {
      merge => {
        "about.ip" => "about_ip"
      }
      on_error => "about_ip_not_present"
    }
  }
  if [about_port] != "" {
    mutate {
      convert => {
        "about_port" => "integer"
      }
      on_error => "about_port_not_convert"
    }
    mutate {
      rename => {
        "about_port" => "about.port"
      }
      on_error => "about_port_not_present"
    }
  }
  if [sev] != "" {
    mutate {
      replace => {
        "severity" => "%{sev}"
      }
      on_error => "sev_not_present"
    }
  }
  mutate {
    uppercase => ["severity","sev"]
  }

  if [severity] in ["0", "1", "2", "3", "LOW"] {
    mutate {
      replace => {
        "security_result.severity" => "LOW"
      }
    }
  }
  else if [severity] in ["4", "5", "6", "MEDIUM", "SUBSTANTIAL", "INFO"] {
    mutate {
      replace => {
        "security_result.severity" => "MEDIUM"
      }
    }
  }
  else if [severity] in ["7", "8", "HIGH", "SEVERE"] {
    mutate {
      replace => {
        "security_result.severity" => "HIGH"
      }
    }
  }
  else if [severity] in ["9", "10", "VERY-HIGH", "CRITICAL"] {
    mutate {
      replace => {
        "security_result.severity" => "CRITICAL"
      }
    }
  }

  if [suser] != "" and [suser] !~ "^{" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.user.user_display_name" => "%{suser}"
      }
      on_error => "suser_not_present"
    }
  }
  if [shost] != "" {
    grok {
      match => {
        "shost" => [
          "%{IP:ip}"
        ]
      }
      on_error => "not_ip"
    }
    if [not_ip] {
      mutate {
        rename => {
          "shost" => "event.idm.read_only_udm.principal.hostname"
        }
      }
    } else {
      mutate {
        replace => {
          "principal_machine_id_present" => "true"
        }
      }
      grok {
        match => {
          "shost" => "%{IP:shost}"
        }
        overwrite => ["shost"]
        on_error => "shost_not_ip"
      }
      if ![shost_not_ip] {
        mutate {
          merge => {
            "event.idm.read_only_udm.principal.ip" => "shost"
          }
          on_error => "shost_not_ip"
        }
      }
    }
  }
  if [src] not in ["", "null", "None"] {
    mutate {
      replace => {
        "principal_ip" => "%{src}"
      }
      on_error => "src_not_set"
    }
    if ![src_not_set] {
      grok {
        match => {
          "principal_ip" => [ "%{IP:principal_ip}" ]
        }
        overwrite => ["principal_ip"]
        on_error => "principal_ip_failure"
      }

      if ![principal_ip_failure] {
        mutate {
          replace => {
            "principal_machine_id_present" => "true"
          }
        }
        mutate {
          merge => {
            "event.idm.read_only_udm.principal.ip" => "principal_ip"
          }
          on_error => "principal_ip_not_set"
        }
      }
    }
  }
  if [srcPort] != "" {
    mutate {
      convert => {
        "srcPort" => "integer"
      }
      on_error => "srcPort_not_convert"
    }
    mutate {
      rename => {
        "srcPort" => "event.idm.read_only_udm.principal.port"
      }
      on_error => "srcPort_not_set"
    }
  }
  if [dst] not in ["", "null"] {
    grok {
      match => {
        "dst" => [ "%{IP:dst}" ]
      }
      overwrite => ["dst"]
      on_error => "dst_ip_failure"
    }

    if ![dst_ip_failure] {
      mutate {
        replace => {
          "target_machine_id_present" => "true"
        }
      }
      mutate {
        merge => {
          "event.idm.read_only_udm.target.ip" => "dst"
        }
        on_error => "dst_ip_not_set"
      }
    }
  }
  if [smac] != "" {
    mutate {
      gsub => [ "smac", "-", ":"]
      lowercase => ["smac"]
    }
    grok {
      match => {
        "smac" => "%{MAC:mac}"
      }
      on_error => "smac_not_present"
    }
    if ![smac_not_present] {
      mutate {
        replace => {
          "principal_machine_id_present" => "true"
        }
      }
      mutate {
        merge => {
          "event.idm.read_only_udm.principal.mac" => "mac"
        }
      }
    }
  }
  if [srcMAC] != "" {
    mutate {
      gsub => [ "srcMAC", "-", ":"]
      lowercase => ["srcMAC"]
    }
    grok {
      match => {
        "srcMAC" => "%{MAC:mac}"
      }
      on_error => "srcMAC_not_present"
    }
    if ![srcMAC_not_present] {
      mutate {
        replace => {
          "principal_machine_id_present" => "true"
        }
      }
      mutate {
        merge => {
          "event.idm.read_only_udm.principal.mac" => "mac"
        }
      }
    }
  }
  if [url] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.url" => "%{url}"
      }
      on_error => "url_not_present"
    }
  }
  if [cat] != "" {
    mutate {
      gsub => ["cat",'\\"',""]
    }
    mutate {
      merge => {
        "security_result.category_details" => "cat"
      }
      on_error => "field_not_present"
    }
  }
  mutate {
    replace => {
      "app_protocol_src" => "%{app}"
    }
    on_error => "app_key_not_present"
  }
  if ![app_key_not_present] {
    mutate {
      uppercase => [ "app_protocol_src" ]
    }
    if [app_protocol_src] in [ "22", "SSH", "SSHD" ] {
      mutate {
        replace => {
          "app_protocol_output" => "SSH"
        }
      }
    }
    else if [app_protocol_src] in [ "25", "SMTP" ] {
      mutate {
        replace => {
          "app_protocol_output" => "SMTP"
        }
      }
    }
    else if [app_protocol_src] in [ "53", "DNS" ] {
      mutate {
        replace => {
          "app_protocol_output" => "DNS"
        }
      }
    }
    else if [app_protocol_src] in [ "80", "8080", "HTTP" ] {
      mutate {
        replace => {
          "app_protocol_output" => "HTTP"
        }
      }
    }
    else if [app_protocol_src] in [ "443", "HTTPS" ] {
      mutate {
        replace => {
          "app_protocol_output" => "HTTPS"
        }
      }
    }
    else if [app_protocol_src] in [ "7400", "7401", "7402", "DDS" ] {
      mutate {
        replace => {
          "app_protocol_output" => "DDS"
        }
      }
    }
    else if [app_protocol_src] in [
      "UNKNOWN_APPLICATION_PROTOCOL", "AFP", "APPC", "AMQP", "ATOM", "BEEP", "BITCOIN",
      "BIT_TORRENT", "CFDP", "COAP", "DEVICE_NET", "DHCP", "E_DONKEY",
      "ENRP", "FAST_TRACK", "FINGER", "FREENET", "FTAM", "GOPHER", "HL7", "H323",
      "IRCP", "KADEMLIA", "LDAP", "LPD", "MIME", "MODBUS", "MQTT", "NETCONF",
      "NFS", "NIS", "NNTP", "NTCIP", "NTP", "OSCAR", "PNRP", "QUIC", "RDP", "RELP", "RIP",
      "RLOGIN", "RPC", "RTMP", "RTP", "RTPS", "RTSP", "SAP", "SDP", "SIP", "SLP", "SMB",
      "SNTP", "SSMS", "STYX", "TCAP", "TDS", "TOR", "TSP", "VTP", "WHOIS",
      "WEB_DAV", "X400", "X500", "XMPP"
    ] {
      mutate {
        replace => {
          "app_protocol_output" => "%{app_protocol_src}"
        }
      }
    }
    else if [app] != "" {
      mutate {
        replace => {
          "event.idm.read_only_udm.principal.application" => "%{app}"
        }
      }
    }
    if [app_protocol_output] != "" {
      mutate {
        replace => {
          "event.idm.read_only_udm.network.application_protocol" => "%{app_protocol_output}"
        }
      }
    }
  }
  if [event_name] != "" and [device_event_class_id] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_event_type" => "[%{device_event_class_id}] - %{event_name}"
      }
      on_error => "product_event_type_not_set"
    }
  } else if [device_event_class_id] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_event_type" => "%{device_event_class_id}"
      }
      on_error => "device_event_class_id_not_set"
    }
  } else if [event_name] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_event_type" => "%{event_name}"
      }
      on_error => "event_name_not_set"
    }
  }
  if [externalId] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_log_id" => "%{externalId}"
      }
      on_error => "no_external_id"
    }
  }
  if [device_version] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_version" => "%{device_version}"
      }
      on_error => "no_device_version"
    }
  }
  if [device_product] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.product_name" => "%{device_product}"
      }
      on_error => "product_name_not_present"
    }
  }
  mutate {
    replace => {
      "most_recent_event" => "%{most_recent_event_time}%{most_recent_event_timezone}"
    }
    on_error => "most_recent_event_not_present"
  }
  if [dvc] != "" {
    grok {
      match => {
        "dvc" => "%{IP:dvc}"
      }
      overwrite => ["dvc"]
      on_error => "not_valid_ip"
    }
    if ![not_valid_ip] {
      mutate {
        merge => {
          "about.ip" => "dvc"
        }
      }
    }
  }

  if [dvchost] != "" {
    mutate {
      replace => {
        "about.hostname" => "%{dvchost}"
      }
      on_error => "no_dvchost"
    }
  }

  if [device_vendor] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.vendor_name" => "%{device_vendor}"
      }
      on_error => "no_device_vendor"
    }
  }
  if [InfobloxSubjectGroups] != "" {
    mutate {
      gsub => ["InfobloxSubjectGroups","(\\[|\\])",""]
    }
    mutate {
      split => {
        source => "InfobloxSubjectGroups"
        separator => ","
        target => "group_array"
        on_error => "msg_array_not_splitted"
      }
    }
    for items in group_array {
      if [items] != "" {
        mutate {
          merge => {
            "event.idm.read_only_udm.principal.user.group_identifiers" => "items"
          }
          on_error => "group_not_set"
        }
      }
    }
  }
  if [msg_value] == "" and [msg] != "" {
    mutate {
      replace => {
        "msg_value" => "%{msg}"
      }
      on_error => "msg_not_set"
    }
  }
  if [msg_value] != "" {
    mutate {
      gsub => ["msg_value","(\\s+;|;\\s+)",";"]
    }
    mutate {
      split => {
        source => "msg_value"
        separator => ";"
        target => "msg_array"
        on_error => "msg_array_not_splitted"
      }
    }
    for items in msg_array {
      mutate {
        replace => {
          "dns_answer1" => ""
          "dns_name" => ""
          "dns_ttl" => ""
          "dns_class" => ""
          "dns_type" => ""
          "dns_data" => ""
          "dns_additional" => ""
          "dns_additional_name" => ""
          "dns_ttl_additional" => ""
          "dns_class_additional" => ""
          "dns_type_additional" => ""
        }
      }
      grok {
        match => {
          "items" => [
            "%{DATA:dns_additional_name} %{INT:dns_ttl_additional} %{INT:dns_class_additional} %{WORD:dns_type_additional}\\s+$"
            "%{DATA:dns_name}\\s+%{INT:dns_ttl}\\s+%{WORD:dns_class}\\s+%{WORD:dns_type}\\s+%{DATA:dns_data}$"
          ]
        }
        on_error => "grok_failed"
        overwrite => ["dns_name","dns_ttl","dns_class","dns_type","dns_data","dns_additional_name","dns_ttl_additional","dns_class_additional","dns_type_additional"]
      }
      if [dns_additional_name] != "" {
        mutate {
          replace => {
            "dns_additional.name" => "%{dns_additional_name}"
          }
          on_error => "dns_name_not_set"
        }
      }
      if [dns_ttl_additional] != "" {
        mutate {
          replace => {
            "dns_additional.ttl" => "%{dns_ttl_additional}"
          }
          on_error => "dns_ttl_not_set"
        }
        mutate {
          convert => {
            "dns_additional.ttl" => "uinteger"
          }
          on_error => "dns_ttl_not_convert"
        }
      }
      if [dns_class_additional] != "" {
        mutate {
          replace => {
            "qclass" => "%{dns_class_additional}"
          }
          on_error => "dns_class_not_set"
        }
        if [qclass] == "IN" {
          mutate {
            replace => {
              "query.class" = "1"
            }
          }
        } else if [qclass] == "CH" {
          mutate {
            replace => {
              "query.class" = "3"
            }
          }
        } else if [qclass] == "HS" {
          mutate {
            replace => {
              "query.class" = "4"
            }
          }
        }
        mutate {
          convert => {
            "query.class" => "uinteger"
          }
          on_error => "query_class_not_convert"
        }
        mutate {
          rename => {
            "query.class" => "dns_additional.class.class"
          }
          on_error => "query_class_not_rename"
        }
      }
      if [dns_type] != "" {
        mutate {
          replace => {
            "record_type" => "%{dns_type}"
          }
          on_error => "field_not_set"
        }
      }
      else if [dns_type_additional] != "" {
        mutate {
          replace => {
            "record_type" => "%{dns_type_additional}"
          }
          on_error => "field_not_set"
        }
      }
      mutate {
        uppercase => ["record_type"]
      }

      if [record_type] == "A"                 {mutate {replace => {  "question.type" => "1"  }}
      }  else if [record_type] == "NS"                {mutate {replace => {  "question.type" => "2"  }}
      }  else if [record_type] == "MD"                {mutate {replace => {  "question.type" => "3"  }}
      }  else if [record_type] == "MF"                {mutate {replace => {  "question.type" => "4"  }}
      }  else if [record_type] == "CNAME"             {mutate {replace => {  "question.type" => "5"  }}
      }  else if [record_type] == "SOA"               {mutate {replace => {  "question.type" => "6"  }}
      }  else if [record_type] == "MB"                {mutate {replace => {  "question.type" => "7"  }}
      }  else if [record_type] == "MG"                {mutate {replace => {  "question.type" => "8"  }}
      }  else if [record_type] == "MR"                {mutate {replace => {  "question.type" => "9"  }}
      }  else if [record_type] == "NULL"              {mutate {replace => {  "question.type" => "10"  }}
      }  else if [record_type] == "WKS"               {mutate {replace => {  "question.type" => "11"  }}
      }  else if [record_type] == "PTR"               {mutate {replace => {  "question.type" => "12"  }}
      }  else if [record_type] == "HINFO"             {mutate {replace => {  "question.type" => "13"  }}
      }  else if [record_type] == "MINFO"             {mutate {replace => {  "question.type" => "14"  }}
      }  else if [record_type] == "MX"                {mutate {replace => {  "question.type" => "15"  }}
      }  else if [record_type] == "TXT"               {mutate {replace => {  "question.type" => "16"  }}
      }  else if [record_type] == "RP"                {mutate {replace => {  "question.type" => "17"  }}
      }  else if [record_type] == "AFSDB"             {mutate {replace => {  "question.type" => "18"  }}
      }  else if [record_type] == "X25"               {mutate {replace => {  "question.type" => "19"  }}
      }  else if [record_type] == "ISDN"              {mutate {replace => {  "question.type" => "20"  }}
      }  else if [record_type] == "RT"                {mutate {replace => {  "question.type" => "21"  }}
      }  else if [record_type] == "NSAP"              {mutate {replace => {  "question.type" => "22"  }}
      }  else if [record_type] == "NSAP-PTR"          {mutate {replace => {  "question.type" => "23"  }}
      }  else if [record_type] == "SIG"               {mutate {replace => {  "question.type" => "24"  }}
      }  else if [record_type] == "KEY"               {mutate {replace => {  "question.type" => "25"  }}
      }  else if [record_type] == "PX"                {mutate {replace => {  "question.type" => "26"  }}
      }  else if [record_type] == "GPOS"              {mutate {replace => {  "question.type" => "27"  }}
      }  else if [record_type] == "AAAA"              {mutate {replace => {  "question.type" => "28"  }}
      }  else if [record_type] == "LOC"               {mutate {replace => {  "question.type" => "29"  }}
      }  else if [record_type] == "NXT"               {mutate {replace => {  "question.type" => "30"  }}
      }  else if [record_type] == "EID"               {mutate {replace => {  "question.type" => "31"  }}
      }  else if [record_type] == "NIMLOC"            {mutate {replace => {  "question.type" => "32"  }}
      }  else if [record_type] == "SRV"               {mutate {replace => {  "question.type" => "33"  }}
      }  else if [record_type] == "ATMA"              {mutate {replace => {  "question.type" => "34"  }}
      }  else if [record_type] == "NAPTR"             {mutate {replace => {  "question.type" => "35"  }}
      }  else if [record_type] == "KX"                {mutate {replace => {  "question.type" => "36"  }}
      }  else if [record_type] == "CERT"              {mutate {replace => {  "question.type" => "37"  }}
      }  else if [record_type] == "A6"                {mutate {replace => {  "question.type" => "38"  }}
      }  else if [record_type] == "DNAME"             {mutate {replace => {  "question.type" => "39"  }}
      }  else if [record_type] == "SINK"              {mutate {replace => {  "question.type" => "40"  }}
      }  else if [record_type] == "OPT"               {mutate {replace => {  "question.type" => "41"  }}
      }  else if [record_type] == "APL"               {mutate {replace => {  "question.type" => "42"  }}
      }  else if [record_type] == "DS"                {mutate {replace => {  "question.type" => "43"  }}
      }  else if [record_type] == "SSHFP"             {mutate {replace => {  "question.type" => "44"  }}
      }  else if [record_type] == "IPSECKEY"          {mutate {replace => {  "question.type" => "45"  }}
      }  else if [record_type] == "RRSIG"             {mutate {replace => {  "question.type" => "46"  }}
      }  else if [record_type] == "NSEC"              {mutate {replace => {  "question.type" => "47"  }}
      }  else if [record_type] == "DNSKEY"            {mutate {replace => {  "question.type" => "48"  }}
      }  else if [record_type] == "DHCID"             {mutate {replace => {  "question.type" => "49"  }}
      }  else if [record_type] == "NSEC3"             {mutate {replace => {  "question.type" => "50"  }}
      }  else if [record_type] == "NSEC3PARAM"        {mutate {replace => {  "question.type" => "51"  }}
      }  else if [record_type] == "TLSA"              {mutate {replace => {  "question.type" => "52"  }}
      }  else if [record_type] == "SMIMEA"            {mutate {replace => {  "question.type" => "53"  }}
      }  else if [record_type] == "UNASSIGNED"        {mutate {replace => {  "question.type" => "54"  }}
      }  else if [record_type] == "HIP"               {mutate {replace => {  "question.type" => "55"  }}
      }  else if [record_type] == "NINFO"             {mutate {replace => {  "question.type" => "56"  }}
      }  else if [record_type] == "RKEY"              {mutate {replace => {  "question.type" => "57"  }}
      }  else if [record_type] == "TALINK"            {mutate {replace => {  "question.type" => "58"  }}
      }  else if [record_type] == "CDS"               {mutate {replace => {  "question.type" => "59"  }}
      }  else if [record_type] == "CDNSKEY"           {mutate {replace => {  "question.type" => "60"  }}
      }  else if [record_type] == "OPENPGPKEY"        {mutate {replace => {  "question.type" => "61"  }}
      }  else if [record_type] == "CSYNC"             {mutate {replace => {  "question.type" => "62"  }}
      }  else if [record_type] == "ZONEMD"            {mutate {replace => {  "question.type" => "63"  }}
      }  else if [record_type] == "SVCB"              {mutate {replace => {  "question.type" => "64"  }}
      }  else if [record_type] == "HTTPS"             {mutate {replace => {  "question.type" => "65"  }}
      }  else if [record_type] == "SPF"               {mutate {replace => {  "question.type" => "99"  }}
      }  else if [record_type] == "UINFO"             {mutate {replace => {  "question.type" => "100"  }}
      }  else if [record_type] == "UID"               {mutate {replace => {  "question.type" => "101"  }}
      }  else if [record_type] == "GID"               {mutate {replace => {  "question.type" => "102"  }}
      }  else if [record_type] == "UNSPEC"            {mutate {replace => {  "question.type" => "103"  }}
      }  else if [record_type] == "NID"               {mutate {replace => {  "question.type" => "104"  }}
      }  else if [record_type] == "L32"               {mutate {replace => {  "question.type" => "105"  }}
      }  else if [record_type] == "L64"               {mutate {replace => {  "question.type" => "106"  }}
      }  else if [record_type] == "LP"                {mutate {replace => {  "question.type" => "107"  }}
      }  else if [record_type] == "EUI48"             {mutate {replace => {  "question.type" => "108"  }}
      }  else if [record_type] == "EUI64"             {mutate {replace => {  "question.type" => "109"  }}
      }  else if [record_type] == "TKEY"              {mutate {replace => {  "question.type" => "249"  }}
      }  else if [record_type] == "TSIG"              {mutate {replace => {  "question.type" => "250"  }}
      }  else if [record_type] == "IXFR"              {mutate {replace => {  "question.type" => "251"  }}
      }  else if [record_type] == "AXFR"              {mutate {replace => {  "question.type" => "252"  }}
      }  else if [record_type] == "MAILB"             {mutate {replace => {  "question.type" => "253"  }}
      }  else if [record_type] == "MAILA"             {mutate {replace => {  "question.type" => "254"  }}
      }  else if [record_type] == "ALL"               {mutate {replace => {  "question.type" => "255"  }}
      }  else if [record_type] == "URI"               {mutate {replace => {  "question.type" => "256"  }}
      }  else if [record_type] == "CAA"               {mutate {replace => {  "question.type" => "257"  }}
      }  else if [record_type] == "AVC"               {mutate {replace => {  "question.type" => "258"  }}
      }  else if [record_type] == "DOA"               {mutate {replace => {  "question.type" => "259"  }}
      }  else if [record_type] == "AMTRELAY"          {mutate {replace => {  "question.type" => "260"  }}
      }  else if [record_type] == "TA"                {mutate {replace => {  "question.type" => "32768"  }}
      }  else if [record_type] == "DLV"               {mutate {replace => {  "question.type" => "32769"  }}
      }
      mutate {
        convert => {
          "question.type" => "uinteger"
        }
        on_error => "already_in_uinteger"
      }
      if [dns_type] != "" {
        mutate {
          rename => {
            "question.type" => "dns_answer1.type"
          }
        }
      }
      else if [dns_type_additional] != "" {
        mutate {
          rename => {
            "question.type" => "dns_additional.type"
          }
        }
      }
      if [dns_additional] != "" {
        mutate {
          merge => {
            "event.idm.read_only_udm.network.dns.additional" => "dns_additional"
          }
          on_error => "dns_additional_not_merged"
        }
      }
      if [dns_name] != "" {
        mutate {
          replace => {
            "dns_answer1.name" => "%{dns_name}"
          }
          on_error => "dns_name_not_set"
        }
      }
      if [dns_ttl] != "" {
        mutate {
          replace => {
            "dns_answer1.ttl" => "%{dns_ttl}"
          }
          on_error => "dns_ttl_not_set"
        }
        mutate {
          convert => {
            "dns_answer1.ttl" => "uinteger"
          }
          on_error => "dns_ttl_not_convert"
        }
      }
      if [dns_class] != "" {
        mutate {
          replace => {
            "qclass" => "%{dns_class}"
          }
          on_error => "dns_class_not_set"
        }
        if [qclass] == "IN" {
          mutate {
            replace => {
              "query.class" = "1"
            }
          }
        } else if [qclass] == "CH" {
          mutate {
            replace => {
              "query.class" = "3"
            }
          }
        } else if [qclass] == "HS" {
          mutate {
            replace => {
              "query.class" = "4"
            }
          }
        }
        mutate {
          convert => {
            "query.class" => "uinteger"
          }
          on_error => "dns_class_not_convert"
        }
        mutate {
          rename => {
            "query.class" => "dns_answer1.class"
          }
        }
      }
      if [dns_data] != "" {
        mutate {
          replace => {
            "dns_answer1.data" => "%{dns_data}"
          }
          on_error => "dns_data_not_set"
        }
      }
      if [dns_answer1] != "" {
        mutate {
          merge => {
            "event.idm.read_only_udm.network.dns.answers" => "dns_answer1"
          }
          on_error => "dns_answer1_not_merged"
        }
      }
    }
  }
  if [InfobloxEventOccurredTime] != "" {
    date {
      match => ["InfobloxEventOccurredTime","UNIX"]
      on_error => "InfobloxEventOccurredTime_not_set"
    }
  }
  else  {
    date {
      match => ["ts","ISO8601"]
      on_error => "ts_not_set"
    }
  }
  if [InfobloxLifetime] != "" {
    mutate {
      convert => {
        "InfobloxLifetime" => "uinteger"
      }
      on_error => "InfobloxLifetime_not_convert"
    }
    mutate {
      rename => {
        "InfobloxLifetime" => "event.idm.read_only_udm.network.dhcp.lease_time_seconds"
      }
    }
  }
  if [InfobloxB1PolicyName] != "" {
    mutate {
      gsub => ["InfobloxB1PolicyName",'\"',""]
    }
    mutate {
      replace => {
        "security_result.rule_name" => "%{InfobloxB1PolicyName}"
      }
      on_error => "InfobloxB1PolicyName_not_set"
    }
  }
  if [InfobloxPolicyID] != "" {
    mutate {
      replace => {
        "security_result.rule_id" => "%{InfobloxPolicyID}"
      }
      on_error => "InfobloxPolicyID_not_set"
    }
  }
  if [proto] != "" {
    if [proto] =~ "(ICMP|ICMPV6)" {
      mutate {
        replace => {
          "proto_value" => "ICMP"
        }
      }
    } else if [proto] =~ "IGMP" {
      mutate {
        replace => {
          "proto_value" => "IGMP"
        }
      }
    } else if [proto] =~ "TCP" {
      mutate {
        replace => {
          "proto_value" => "TCP"
        }
      }
    } else if [proto] =~ "UDP" {
      mutate {
        replace => {
          "proto_value" => "UDP"
        }
      }
    } else if [proto] =~ "IP6IN4" {
      mutate {
        replace => {
          "proto_value" => "IP6IN4"
        }
      }
    } else if [proto] =~ "GRE" {
      mutate {
        replace => {
          "proto_value" => "GRE"
        }
      }
    } else if [proto] =~ "ESP" {
      mutate {
        replace => {
          "proto_value" => "ESP"
        }
      }
    } else if [proto] =~ "EIGRP" {
      mutate {
        replace => {
          "proto_value" => "EIGRP"
        }
      }
    }  else if [proto] =~ "ETHERIP" {
      mutate {
        replace => {
          "proto_value" => "ETHERIP"
        }
      }
    } else if [proto] =~ "PIM" {
      mutate {
        replace => {
          "proto_value" => "PIM"
        }
      }
    } else if [proto] =~ "VRRP" {
      mutate {
        replace => {
          "proto_value" => "VRRP"
        }
      }
    }

    if [proto_value] != "" {
      mutate {
        replace => {
          "event.idm.read_only_udm.network.ip_protocol" => "%{proto_value}"
        }
        on_error => "proto_value_not_set"
      }
    }
  }
  if [InfobloxB1DNSTags] != "" {
    mutate {
      gsub => ["InfobloxB1DNSTags",'\"',""]
    }
    mutate {
      split => {
        source => "InfobloxB1DNSTags"
        separator => ","
        target => "InfobloxB1DNSTags_array"
        on_error => "InfobloxB1DNSTags_not_set"
      }
    }
    for infobloxtag in InfobloxB1DNSTags_array {
      mutate {
        merge => {
          "security_result.category_details" => "infobloxtag"
        }
        on_error => "infobloxtag_not_merged"
      }
    }
  }
  if [destinationDnsDomain] != "" {
    mutate {
      replace => {
        "dns_question.name" => "%{destinationDnsDomain}"
        "has_question_name" => "true"
      }
      on_error => "destinationDnsDomain_not_set"
    }
  }
  if [InfobloxDNSQType] != "" {
    mutate {
      replace => {
        "record_type" => "%{InfobloxDNSQType}"
      }
      on_error => "field_not_set"
    }
    mutate {
      uppercase => ["record_type"]
    }
    if [record_type] == "A"                 {mutate {replace => {  "question.type" => "1"  }}
    }  else if [record_type] == "NS"                {mutate {replace => {  "question.type" => "2"  }}
    }  else if [record_type] == "MD"                {mutate {replace => {  "question.type" => "3"  }}
    }  else if [record_type] == "MF"                {mutate {replace => {  "question.type" => "4"  }}
    }  else if [record_type] == "CNAME"             {mutate {replace => {  "question.type" => "5"  }}
    }  else if [record_type] == "SOA"               {mutate {replace => {  "question.type" => "6"  }}
    }  else if [record_type] == "MB"                {mutate {replace => {  "question.type" => "7"  }}
    }  else if [record_type] == "MG"                {mutate {replace => {  "question.type" => "8"  }}
    }  else if [record_type] == "MR"                {mutate {replace => {  "question.type" => "9"  }}
    }  else if [record_type] == "NULL"              {mutate {replace => {  "question.type" => "10"  }}
    }  else if [record_type] == "WKS"               {mutate {replace => {  "question.type" => "11"  }}
    }  else if [record_type] == "PTR"               {mutate {replace => {  "question.type" => "12"  }}
    }  else if [record_type] == "HINFO"             {mutate {replace => {  "question.type" => "13"  }}
    }  else if [record_type] == "MINFO"             {mutate {replace => {  "question.type" => "14"  }}
    }  else if [record_type] == "MX"                {mutate {replace => {  "question.type" => "15"  }}
    }  else if [record_type] == "TXT"               {mutate {replace => {  "question.type" => "16"  }}
    }  else if [record_type] == "RP"                {mutate {replace => {  "question.type" => "17"  }}
    }  else if [record_type] == "AFSDB"             {mutate {replace => {  "question.type" => "18"  }}
    }  else if [record_type] == "X25"               {mutate {replace => {  "question.type" => "19"  }}
    }  else if [record_type] == "ISDN"              {mutate {replace => {  "question.type" => "20"  }}
    }  else if [record_type] == "RT"                {mutate {replace => {  "question.type" => "21"  }}
    }  else if [record_type] == "NSAP"              {mutate {replace => {  "question.type" => "22"  }}
    }  else if [record_type] == "NSAP-PTR"          {mutate {replace => {  "question.type" => "23"  }}
    }  else if [record_type] == "SIG"               {mutate {replace => {  "question.type" => "24"  }}
    }  else if [record_type] == "KEY"               {mutate {replace => {  "question.type" => "25"  }}
    }  else if [record_type] == "PX"                {mutate {replace => {  "question.type" => "26"  }}
    }  else if [record_type] == "GPOS"              {mutate {replace => {  "question.type" => "27"  }}
    }  else if [record_type] == "AAAA"              {mutate {replace => {  "question.type" => "28"  }}
    }  else if [record_type] == "LOC"               {mutate {replace => {  "question.type" => "29"  }}
    }  else if [record_type] == "NXT"               {mutate {replace => {  "question.type" => "30"  }}
    }  else if [record_type] == "EID"               {mutate {replace => {  "question.type" => "31"  }}
    }  else if [record_type] == "NIMLOC"            {mutate {replace => {  "question.type" => "32"  }}
    }  else if [record_type] == "SRV"               {mutate {replace => {  "question.type" => "33"  }}
    }  else if [record_type] == "ATMA"              {mutate {replace => {  "question.type" => "34"  }}
    }  else if [record_type] == "NAPTR"             {mutate {replace => {  "question.type" => "35"  }}
    }  else if [record_type] == "KX"                {mutate {replace => {  "question.type" => "36"  }}
    }  else if [record_type] == "CERT"              {mutate {replace => {  "question.type" => "37"  }}
    }  else if [record_type] == "A6"                {mutate {replace => {  "question.type" => "38"  }}
    }  else if [record_type] == "DNAME"             {mutate {replace => {  "question.type" => "39"  }}
    }  else if [record_type] == "SINK"              {mutate {replace => {  "question.type" => "40"  }}
    }  else if [record_type] == "OPT"               {mutate {replace => {  "question.type" => "41"  }}
    }  else if [record_type] == "APL"               {mutate {replace => {  "question.type" => "42"  }}
    }  else if [record_type] == "DS"                {mutate {replace => {  "question.type" => "43"  }}
    }  else if [record_type] == "SSHFP"             {mutate {replace => {  "question.type" => "44"  }}
    }  else if [record_type] == "IPSECKEY"          {mutate {replace => {  "question.type" => "45"  }}
    }  else if [record_type] == "RRSIG"             {mutate {replace => {  "question.type" => "46"  }}
    }  else if [record_type] == "NSEC"              {mutate {replace => {  "question.type" => "47"  }}
    }  else if [record_type] == "DNSKEY"            {mutate {replace => {  "question.type" => "48"  }}
    }  else if [record_type] == "DHCID"             {mutate {replace => {  "question.type" => "49"  }}
    }  else if [record_type] == "NSEC3"             {mutate {replace => {  "question.type" => "50"  }}
    }  else if [record_type] == "NSEC3PARAM"        {mutate {replace => {  "question.type" => "51"  }}
    }  else if [record_type] == "TLSA"              {mutate {replace => {  "question.type" => "52"  }}
    }  else if [record_type] == "SMIMEA"            {mutate {replace => {  "question.type" => "53"  }}
    }  else if [record_type] == "UNASSIGNED"        {mutate {replace => {  "question.type" => "54"  }}
    }  else if [record_type] == "HIP"               {mutate {replace => {  "question.type" => "55"  }}
    }  else if [record_type] == "NINFO"             {mutate {replace => {  "question.type" => "56"  }}
    }  else if [record_type] == "RKEY"              {mutate {replace => {  "question.type" => "57"  }}
    }  else if [record_type] == "TALINK"            {mutate {replace => {  "question.type" => "58"  }}
    }  else if [record_type] == "CDS"               {mutate {replace => {  "question.type" => "59"  }}
    }  else if [record_type] == "CDNSKEY"           {mutate {replace => {  "question.type" => "60"  }}
    }  else if [record_type] == "OPENPGPKEY"        {mutate {replace => {  "question.type" => "61"  }}
    }  else if [record_type] == "CSYNC"             {mutate {replace => {  "question.type" => "62"  }}
    }  else if [record_type] == "ZONEMD"            {mutate {replace => {  "question.type" => "63"  }}
    }  else if [record_type] == "SVCB"              {mutate {replace => {  "question.type" => "64"  }}
    }  else if [record_type] == "HTTPS"             {mutate {replace => {  "question.type" => "65"  }}
    }  else if [record_type] == "SPF"               {mutate {replace => {  "question.type" => "99"  }}
    }  else if [record_type] == "UINFO"             {mutate {replace => {  "question.type" => "100"  }}
    }  else if [record_type] == "UID"               {mutate {replace => {  "question.type" => "101"  }}
    }  else if [record_type] == "GID"               {mutate {replace => {  "question.type" => "102"  }}
    }  else if [record_type] == "UNSPEC"            {mutate {replace => {  "question.type" => "103"  }}
    }  else if [record_type] == "NID"               {mutate {replace => {  "question.type" => "104"  }}
    }  else if [record_type] == "L32"               {mutate {replace => {  "question.type" => "105"  }}
    }  else if [record_type] == "L64"               {mutate {replace => {  "question.type" => "106"  }}
    }  else if [record_type] == "LP"                {mutate {replace => {  "question.type" => "107"  }}
    }  else if [record_type] == "EUI48"             {mutate {replace => {  "question.type" => "108"  }}
    }  else if [record_type] == "EUI64"             {mutate {replace => {  "question.type" => "109"  }}
    }  else if [record_type] == "TKEY"              {mutate {replace => {  "question.type" => "249"  }}
    }  else if [record_type] == "TSIG"              {mutate {replace => {  "question.type" => "250"  }}
    }  else if [record_type] == "IXFR"              {mutate {replace => {  "question.type" => "251"  }}
    }  else if [record_type] == "AXFR"              {mutate {replace => {  "question.type" => "252"  }}
    }  else if [record_type] == "MAILB"             {mutate {replace => {  "question.type" => "253"  }}
    }  else if [record_type] == "MAILA"             {mutate {replace => {  "question.type" => "254"  }}
    }  else if [record_type] == "ALL"               {mutate {replace => {  "question.type" => "255"  }}
    }  else if [record_type] == "URI"               {mutate {replace => {  "question.type" => "256"  }}
    }  else if [record_type] == "CAA"               {mutate {replace => {  "question.type" => "257"  }}
    }  else if [record_type] == "AVC"               {mutate {replace => {  "question.type" => "258"  }}
    }  else if [record_type] == "DOA"               {mutate {replace => {  "question.type" => "259"  }}
    }  else if [record_type] == "AMTRELAY"          {mutate {replace => {  "question.type" => "260"  }}
    }  else if [record_type] == "TA"                {mutate {replace => {  "question.type" => "32768"  }}
    }  else if [record_type] == "DLV"               {mutate {replace => {  "question.type" => "32769"  }}
    }

    mutate {
      convert => {
        "question.type" => "uinteger"
      }
      on_error => "already_in_uinteger"
    }
    mutate {
      rename => {
        "question.type" => "dns_question.type"
      }
    }
  }
  if [InfobloxDNSQClass] != "" {
    mutate {
      replace => {
        "qclass" => "%{InfobloxDNSQClass}"
      }
      on_error => "InfobloxDNSQClass_not_set"
    }
    if [qclass] == "IN" {
      mutate {
        replace => {
          "query.class" = "1"
        }
      }
    } else if [qclass] == "CH" {
      mutate {
        replace => {
          "query.class" = "3"
        }
      }
    } else if [qclass] == "HS" {
      mutate {
        replace => {
          "query.class" = "4"
        }
      }
    }
    mutate {
      convert => {
        "query.class" => "uinteger"
      }
      on_error => "already_in_uinteger"
    }
    mutate {
      rename => {
        "query.class" => "dns_question.class"
      }
    }
  }
  if [InfobloxResourceType] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.resource.resource_subtype" => "%{InfobloxResourceType}"
      }
      on_error => "InfobloxResourceType_not_set"
    }
  }
  if [InfobloxResourceId] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.target.resource.id" => "%{InfobloxResourceId}"
      }
      on_error => "InfobloxResourceId_not_set"
    }
  }
  if [InfobloxHTTPReqBody] != "" {
    json {
      source => "InfobloxHTTPReqBody"
      array_function => "split_columns"
      target => "req_body"
      on_error => "InfobloxHTTPReqBody_not_set"
    }
  }
  if [InfobloxHTTPRespBody] != "" {
    json {
      source => "InfobloxHTTPRespBody"
      array_function => "split_columns"
      target => "resp_body"
      on_error => "InfobloxHTTPRespBody_not_set"
    }
  }
  grok {
    match => {
      "req_body.rdata.address" => [
        "%{IP:req_body_address}"
      ]
    }
    on_error => "req_body_address_not_set"
    overwrite => ["req_body_address"]
  }
  if ![req_body_address_not_set] {
    mutate {
      merge => {
        "event.idm.read_only_udm.target.ip" => "req_body_address"
      }
      on_error => "req_body_address_not_set"
    }
    mutate {
      replace => {
        "target_machine_id_present" => "true"
      }
    }
  }
  grok {
    match => {
      "response.result.dns_rdata" => [
        "%{IP:response_result_dns_rdata}"
      ]
    }
    on_error => "response_result_dns_rdata_not_set"
    overwrite => ["response_result_dns_rdata"]
  }
  if ![response_result_dns_rdata_not_set] {
    mutate {
      merge => {
        "event.idm.read_only_udm.target.ip" => "response_result_dns_rdata"
      }
      on_error => "response_result_dns_rdata_not_set"
    }
    mutate {
      replace => {
        "target_machine_id_present" => "true"
      }
    }
  }
  if [InfobloxDNSRCode] != "" {
    mutate {
      replace => {
        "response_code" => "%{InfobloxDNSRCode}"
      }
      on_error => "response_code_not_set"
    }
    mutate {
      uppercase => ["response_code"]
    }
    if [response_code] == "NOERROR"   {mutate {replace => {  "dns.response_code" => "0"  }}}
    else if [response_code] == "FORMERR"   {mutate {replace => {  "dns.response_code" => "1"  }}}
    else if [response_code] == "SERVFAIL"  {mutate {replace => {  "dns.response_code" => "2"  }}}
    else if [response_code] == "NXDOMAIN"  {mutate {replace => {  "dns.response_code" => "3"  }}}
    else if [response_code] == "NOTIMP"    {mutate {replace => {  "dns.response_code" => "4"  }}}
    else if [response_code] == "REFUSED"   {mutate {replace => {  "dns.response_code" => "5"  }}}
    else if [response_code] == "YXDOMAIN"  {mutate {replace => {  "dns.response_code" => "6"  }}}
    else if [response_code] == "YXRRSET"   {mutate {replace => {  "dns.response_code" => "7"  }}}
    else if [response_code] == "NXRRSET"   {mutate {replace => {  "dns.response_code" => "8"  }}}
    else if [response_code] == "NOTAUTH"   {mutate {replace => {  "dns.response_code" => "9"  }}}
    else if [response_code] == "NOTZONE"   {mutate {replace => {  "dns.response_code" => "10"  }}}
    else if [response_code] == "DSOTYPENI" {mutate {replace => {  "dns.response_code" => "11"  }}}
    else if [response_code] == "BADVERS"   {mutate {replace => {  "dns.response_code" => "16"  }}}
    else if [response_code] == "BADSIG"    {mutate {replace => {  "dns.response_code" => "16"  }}}
    else if [response_code] == "BADKEY"    {mutate {replace => {  "dns.response_code" => "17"  }}}
    else if [response_code] == "BADTIME"   {mutate {replace => {  "dns.response_code" => "18"  }}}
    else if [response_code] == "BADMODE"   {mutate {replace => {  "dns.response_code" => "19"  }}}
    else if [response_code] == "BADNAME"   {mutate {replace => {  "dns.response_code" => "20"  }}}
    else if [response_code] == "BADALG"    {mutate {replace => {  "dns.response_code" => "21"  }}}
    else if [response_code] == "BADTRUNC"  {mutate {replace => {  "dns.response_code" => "22"  }}}
    else if [response_code] == "BADCOOKIE" {mutate {replace => {  "dns.response_code" => "23"  }}}

    mutate {
      convert => {
        "dns.response_code" => "uinteger"
      }
      on_error => "already_in_uinteger"
    }
    mutate {
      rename => {
        "dns.response_code" => "event.idm.read_only_udm.network.dns.response_code"
      }
      on_error => "dns_response_code_not_set"
    }
  }
  if [InfobloxB1Region] != "" {
    mutate {
      replace => {
        "intermediary.location.country_or_region" => "%{InfobloxB1Region}"
      }
      on_error => "InfobloxB1Region_not_set"
    }
  }
  if [InfobloxThreatConfidence] != "" {
    mutate {
      convert => {
        "InfobloxThreatConfidence" => "string"
      }
      on_error => "InfobloxThreatConfidence_not_convert"
    }
    mutate {
      replace => {
        "security_result.confidence_score" => "%{InfobloxThreatConfidence}"
      }
      on_error => "InfobloxThreatConfidence_not_set"
    }
    mutate {
      convert => {
        "security_result.confidence_score" => "float"
      }
      on_error => "confidence_score_not_convert"
    }
  }
  if [InfobloxThreatLevel] != "" {
    mutate {
      convert => {
        "InfobloxThreatLevel" => "string"
      }
      on_error => "InfobloxThreatLevel_not_convert"
    }
    mutate {
      replace => {
        "security_result.severity_details" => "%{InfobloxThreatLevel}"
      }
      on_error => "InfobloxThreatLevel_not_set"
    }
  }
  if [InfobloxThreatProperty] != "" {
    mutate {
      replace => {
        "security_result.threat_name" => "%{InfobloxThreatProperty}"
      }
      on_error => "InfobloxThreatProperty_not_set"
    }
  }
  if [InfobloxInsightId] != "" {
    mutate {
      replace => {
        "security_result.threat_id" => "%{InfobloxInsightId}"
      }
      on_error => "InfobloxInsightId_not_set"
    }
  }
  if [InfobloxInsightThreatType] != "" {
    mutate {
      replace => {
        "security_result.threat_name" => "%{InfobloxInsightThreatType}"
      }
      on_error => "InfobloxInsightThreatType_not_set"
    }
  }
  if [InfobloxThreatClass] != "" {
    mutate {
      merge => {
        "security_result.category_details" => "InfobloxThreatClass"
      }
      on_error => "InfobloxThreatClass_not_set"
    }
  }
  if [InfobloxB1OPHIPAddress] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.principal.ip" => "InfobloxB1OPHIPAddress"
        "event.idm.read_only_udm.principal.asset.ip" => "InfobloxB1OPHIPAddress"
      }
      on_error => "InfobloxB1OPHIPAddress_not_set"
    }
    if ![InfobloxB1OPHIPAddress_not_set] {
      mutate {
        replace => {
          "principal_machine_id_present" => "true"
        }
      }
    }
  }
  if [result] == "Success" {
    mutate {
      replace => {
        "security_result_action" => "ALLOW"
      }
      on_error => "event_type_not_set"
    }
  }
  if [security_result_action] != "" {
    mutate {
      merge => {
        "security_result.action" => "security_result_action"
      }
      on_error => "security_result_action_not_set"
    }
  }
  if [InfobloxClientID] != "" {
    grok {
      match => {
        "InfobloxClientID" => [
          "%{INT}:%{MAC:InfobloxClientID}$",
          "%{MAC:InfobloxClientID}"
        ]
      }
      on_error => "InfobloxClientID_not_set"
      overwrite => ["InfobloxClientID"]
    }
    if ![InfobloxClientID_not_set] {
      mutate {
        replace => {
          "event.idm.read_only_udm.network.dhcp.chaddr" => "%{InfobloxClientID}"
        }
        on_error => "InfobloxClientID_not_replaced"
      }
    }
  }
  if [usrName] != "" {
    mutate {
      replace => {
        "event.idm.read_only_udm.principal.user.userid" => "%{usrName}"
        "has_principal_user" => "true"
      }
      on_error => "usrName_not_set"
    }
  }
  if [intermediary_application] != "" {
    mutate {
      replace => {
        "intermediary.application" => "%{intermediary_application}"
      }
      on_error => "intermediary_application_not_set"
    }
  }
  mutate {
    rename => {
      # additional fields
      "InfobloxCSiteId" => "addition.InfobloxCSiteId"
      "InfobloxB1DHCPFingerprint" => "addition.InfobloxB1DHCPFingerprint"
      "InfobloxB1OPHName" => "addition.InfobloxB1OPHName"
      "InfobloxB1Network" => "addition.InfobloxB1Network"
      "InfobloxB1PolicyAction" => "addition.InfobloxB1PolicyAction"
      "InfobloxB1ConnectionType" => "addition.InfobloxB1ConnectionType"
      "InfobloxDNSView" => "addition.InfobloxDNSView"
      "InfobloxDNSQFlags" => "addition.InfobloxDNSQFlags"
      "InfobloxAnCount" => "addition.InfobloxAnCount"
      "InfobloxNsCount" => "addition.InfobloxNsCount"
      "InfobloxArCount" => "addition.InfobloxArCount"
      "InfobloxFingerprintPr" => "addition.InfobloxFingerprintPr"
      "status" => "addition.status"
      "InfobloxThreatFamily" => "addition.InfobloxThreatFamily"
      "InfobloxNotificationSubType" => "addition.InfobloxNotificationSubType"
      "InfobloxNotificationType" => "addition.InfobloxNotificationType"
      "most_recent_event" => "addition.most_recent_event"
      "outcome" => "addition.outcome"
      "resp_body.result.created_at" => "addition.InfobloxHTTPRespBody_result_created_at"
      "resp_body.result.updated_at" => "addition.InfobloxHTTPRespBody_result_updated_at"
      "response.result.created_at.seconds" => "addition.response_result_created_at_seconds"
      "response.result.created_at.nanos" => "addition.response_result_created_at_nanos"
      "response.result.updated_at.seconds" => "addition.response_result_updated_at_seconds"
      "response.result.updated_at.nanos" => "addition.response_result_updated_at_nanos"
      "resp_body.result.id" => "addition.InfobloxHTTPRespBody_result_id"
      "resp_body.result.view" => "addition.InfobloxHTTPRespBody_result_view"
      "response.result.absolute_name_spec" => "addition.response_result_absolute_name_spec"
      "resp_body.result.dns_rdata" => "addition.InfobloxHTTPRespBody_result_dns_rdata"
      "resp_body.result.name_in_zone" => "addition.InfobloxHTTPRespBody_result_name_in_zone"
      "act" => "addition.act"
      "InfobloxLeaseOp" => "addition.InfobloxLeaseOp"
      "InfobloxLogName" => "addition.InfobloxLogName"
      # security result detection fields
      "InfobloxB1FeedName" => "addition.InfobloxB1FeedName"
      "InfobloxB1FeedType" => "addition.InfobloxB1FeedType"
      "InfobloxB1ThreatIndicator" => "addition.InfobloxB1ThreatIndicator"
      "InfobloxRPZ" => "addition.InfobloxRPZ"
      "InfobloxRPZRule" => "addition.InfobloxRPZRule"
      "InfobloxInsightFeedSource" => "addition.InfobloxInsightFeedSource"
      "InfobloxInsightStatus" => "addition.InfobloxInsightStatus"
      "InfobloxEventsBlockedCount" => "addition.InfobloxEventsBlockedCount"
      "InfobloxEventsNotBlockedCount" => "addition.InfobloxEventsNotBlockedCount"
      "response.result.ttl" => "addition.response_result_ttl"
      "cnt" => "addition.cnt"
      "InfobloxSubjectType" => "addition.InfobloxSubjectType"
      # principal asset attribute labels
      "InfobloxHostID" => "addition.InfobloxHostID"
      "InfobloxDUID" => "addition.InfobloxDUID"
      # intermediary asset attribute labels
      "InfobloxRangeEnd" => "addition.InfobloxRangeEnd"
      "InfobloxRangeStart" => "addition.InfobloxRangeStart"
      "InfobloxIPSpace" => "addition.InfobloxIPSpace"
      "InfobloxSubnet" => "addition.InfobloxSubnet"
      # target resource attribute labels
      "resp_body.result.dns_absolute_name_spec" => "addition.InfobloxHTTPRespBody_result_dns_absolute_name_spec"
      "resp_body.result.type"  => "addition.InfobloxHTTPRespBody_result_type"
      "resp_body.result.ttl" => "addition.InfobloxHTTPRespBody_result_ttl"
      "resp_body.result.zone" => "addition.InfobloxHTTPRespBody_result_zone"
      "InfobloxPoolId" => "addition.InfobloxPoolId"
      "InfobloxServiceId" => "addition.InfobloxServiceId"
      "module" => "addition.module"
      "command" => "addition.command"
      "req_body.inheritance_sources.ttl.action" => "addition.InfobloxHTTPReqBody_inheritance_sources_ttl_action"
      "req_body.name_in_zone" => "addition.InfobloxHTTPReqBody_name_in_zone"
      "req_body.type" => "addition.InfobloxHTTPReqBody_type"
      "req_body.zone" => "addition.InfobloxHTTPReqBody_zone"
      "response.result.absolute_zone_name" => "addition.response_absolute_zone_name"
      "response.result.id" => "addition.response_result_id"
      "ttl" => "addition.ttl"
      "response.result.zone" => "addition.response_result_zone"
      "resp_body.result.absolute_zone_name" => "addition.InfobloxHTTPRespBody_result_absolute_zone_name"
    }
  }
  for key, value in addition map {
    mutate {
      replace => {
        "field1" => ""
        "check" => ""
      }
    }
    mutate {
      convert => {
        "value" => "string"
      }
      on_error => "value_not_convert"
    }
    mutate {
      replace => {
        "check" => "%{value}"
      }
      on_error => "no_value_replaced"
    }
    if ![no_value_replaced] and [check] != "" {
      mutate {
        gsub => ["value",'\"',""]
      }
      mutate {
        replace => {
          "field1.key" => "%{key}"
        }
        on_error => "no_key"
      }
      if [key] in ["InfobloxEventsNotBlockedCount","InfobloxEventsBlockedCount","InfobloxInsightStatus","InfobloxB1FeedName","InfobloxB1FeedType","InfobloxB1ThreatIndicator","InfobloxRPZ","InfobloxRPZRule","InfobloxInsightFeedSource"] {
        mutate {
          replace => {
            "field1.value" => "%{value}"
          }
          on_error => "no_security_detection_value"
        }
        mutate {
          merge => {
            "security_result.detection_fields" => "field1"
          }
          on_error => "security_detection_fields_not_merged"
        }
      }
      else if [key] in ["InfobloxHostID","InfobloxDUID"] {
        mutate {
          replace => {
            "field1.value" => "%{value}"
          }
          on_error => "no_principal_asset_attribute_value"
        }
        mutate {
          merge => {
            "event.idm.read_only_udm.principal.asset.attribute.labels" => "field1"
          }
          on_error => "principal_asset_attribute_labels_not_merged"
        }
      }
      else if [key] in ["InfobloxRangeEnd","InfobloxRangeStart","InfobloxIPSpace","InfobloxSubnet"] {
        mutate {
          replace => {
            "field1.value" => "%{value}"
          }
          on_error => "no__intermediary_asset_attribute_value"
        }
        mutate {
          merge => {
            "event.idm.read_only_udm.intermediary.asset.attribute.labels" => "field1"
          }
          on_error => "intermediary_asset_attribute_labels_not_merged"
        }
      }
      else if [key] in ["InfobloxHTTPRespBody_result_dns_absolute_name_spec","InfobloxHTTPRespBody_result_type","InfobloxHTTPRespBody_result_ttl","InfobloxHTTPRespBody_result_absolute_zone_name","InfobloxHTTPRespBody_result_zone","ttl","response_result_zone","response_result_id","response_absolute_zone_name","InfobloxHTTPReqBody_zone","InfobloxHTTPReqBody_type","InfobloxHTTPReqBody_name_in_zone","InfobloxHTTPReqBody_inheritance_sources_ttl_action","module","command","InfobloxPoolId","InfobloxServiceId"] {
        mutate {
          replace => {
            "field1.value" => "%{value}"
          }
          on_error => "no_target_resource_attribute_value"
        }
        mutate {
          merge => {
            "event.idm.read_only_udm.target.resource.attribute.labels" => "field1"
          }
          on_error => "target_resource_attribute_labels_not_merged"
        }
      }
      else {
        mutate {
          replace => {
            "field1.value.string_value" => "%{value}"
          }
          on_error => "no_additional_value"
        }
        mutate {
          merge => {
            "event.idm.read_only_udm.additional.fields" => "field1"
          }
          on_error => "field1_not_merged"
        }
      }
    }
  }
  if [dns_question] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.network.dns.questions" => "dns_question"
      }
      on_error => "dns_question_not_merged"
    }
  }
  if [intermediary] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.intermediary" => "intermediary"
      }
      on_error => "intermediary_not_merged"
    }
  }
  if [about] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.about" => "about"
      }
      on_error => "about_not_merged"
    }
  }
  if [principal_machine_id_present] == "true" and [app] == "DNS" and [has_question_name] == "true" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "NETWORK_DNS"
      }
    }
  }
  else if [principal_machine_id_present] == "true" and [app] == "DHCP" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "NETWORK_DHCP"
      }
    }
  }
  else if [principal_machine_id_present] == "true" and [target_machine_id_present] == "true" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "NETWORK_CONNECTION"
      }
    }
  }
  else if [has_principal_user] == "true" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "USER_UNCATEGORIZED"
      }
    }
  }
  else if [principal_machine_id_present] == "true" {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "STATUS_UPDATE"
      }
    }
  }
  else {
    mutate {
      replace => {
        "event.idm.read_only_udm.metadata.event_type" => "GENERIC_EVENT"
      }
    }
  }
  if [security_result] != "" {
    mutate {
      merge => {
        "event.idm.read_only_udm.security_result" => "security_result"
      }
      on_error => "merge_error"
    }
  }
  mutate {
    merge => {
      "@output" => "event"
    }
  }
}
